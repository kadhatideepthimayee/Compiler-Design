1. The lexical analyser should ignore redundant spaces, tabs and new lines. It should also ignore comments. Although the syntax specification states that identifiers can be arbitrarily long, you may restrict the length to some reasonable value. Develop a lexical Analyzer to identify identifiers, constants, operators using C program.
Program:
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX_LENGTH 31 

int isOperator(char ch) {
    char operators[] = "+-*/%=";
    for (int i = 0; i < strlen(operators); i++)
        if (ch == operators[i])
            return 1;
    return 0;
}

int isIdentifier(char *str) {
    if (!isalpha(str[0]) && str[0] != '_')
        return 0;
    for (int i = 1; i < strlen(str); i++)
        if (!isalnum(str[i]) && str[i] != '_')
            return 0;
    return 1;
}

int isConstant(char *str) {
    for (int i = 0; i < strlen(str); i++)
        if (!isdigit(str[i]))
            return 0;
    return 1;
}

int main() {
    char input[50];
    printf("Enter a token: ");
    scanf("%s", input);

    if (isIdentifier(input))
        printf("It is an Identifier.\n");
    else if (isConstant(input))
        printf("It is a Constant.\n");
    else if (isOperator(input[0]) && strlen(input) == 1)
        printf("It is an Operator.\n");
    else
        printf("Unknown token.\n");

    return 0;
}
