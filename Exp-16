16. The lexical analyzer should ignore redundant spaces, tabs and new lines. It should also
ignore comments. Although the syntax specification states that identifiers can be
arbitrarily long, you may restrict the length to some reasonable value. Write a LEX
specification file to take input C program from a .c file and count t he number of
characters, number of lines &amp; number of words.
Code:
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main() {
    FILE *file;
    char filename[100], ch, prev = ' ';
    int char_count = 0, word_count = 0, line_count = 0;
    int in_comment = 0, in_string = 0, in_word = 0;

    // Ask user for the file name
    printf("Enter the filename: ");
    scanf("%s", filename);

    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file: %s\n", filename);
        return 1;
    }

    while ((ch = fgetc(file)) != EOF) {
        char_count++;

        // Handle multi-line comments
        if (in_comment) {
            if (prev == '*' && ch == '/') {
                in_comment = 0;
                ch = ' '; // Convert to space to prevent word counting issues
            }
        } 
        else if (prev == '/' && ch == '*') {
            in_comment = 1;
            char_count -= 2; // Remove comment characters from count
            ch = ' '; // Convert to space
        } 
        // Handle single-line comments
        else if (prev == '/' && ch == '/') {
            while ((ch = fgetc(file)) != '\n' && ch != EOF);
            line_count++; 
            ch = ' '; // Convert to space
        } 
        // Handle string literals
        else if (ch == '"' && prev != '\\') {
            in_string = !in_string;
        } 
        // Count words & lines
        if (!in_comment && !in_string) {
            if (isspace(ch)) {
                if (in_word) {
                    word_count++;
                    in_word = 0;
                }
                if (ch == '\n') {
                    line_count++;
                }
            } else {
                in_word = 1;
            }
        }

        prev = ch;
    }

    // Count last word if not counted
    if (in_word) {
        word_count++;
    }

    fclose(file);

    printf("Characters: %d\n", char_count);
    printf("Words: %d\n", word_count);
    printf("Lines: %d\n", line_count);

    return 0;
}
